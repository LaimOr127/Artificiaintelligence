{"cells":[{"cell_type":"markdown","id":"28cb9c9c","metadata":{"id":"28cb9c9c"},"source":["## **Задание 1.1**\n"]},{"cell_type":"code","execution_count":null,"id":"1116fd13","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1116fd13","executionInfo":{"status":"ok","timestamp":1684842439820,"user_tz":-180,"elapsed":26,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"c57cb3cf-2696-4240-ac8c-3ffb49e0fa52"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.8067238139969796\n"]}],"source":["import numpy as np\n","\n","def sigmoid(x):\n","    return 1/(1 + np.exp(-x))\n","\n","class Neuron:\n","    def __init__(self, weights, bias):\n","        self.weights = weights\n","        self.bias = bias\n","    def feedforward(self, inputs):\n","        total = np.dot(self.weights, inputs) + self.bias\n","        return sigmoid(total)\n","class OurNeuralNetwork1:\n","    def __init__(self):\n","        weights = np.array([0.5, 0.5, 0.5])\n","        bias = 0\n","        self.h1 = Neuron(weights, bias)\n","        self.h2 = Neuron(weights, bias)\n","        self.h3 = Neuron(weights, bias)\n","        self.o1 = Neuron(weights, bias)\n","        \n","    def feedforward(self, x):\n","        out_h1 = self.h1.feedforward(x)\n","        out_h2 = self.h2.feedforward(x)\n","        out_h3 = self.h3.feedforward(x)\n","        out_o1 = self.o1.feedforward(np.array([out_h1, out_h2, out_h3]))\n","        return out_o1\n","        \n","network = OurNeuralNetwork1()\n","x = np.array([1, 2, 3])\n","print(network.feedforward(x))"]},{"cell_type":"markdown","id":"84aa7f03","metadata":{"id":"84aa7f03"},"source":["## **Задание 1.2**"]},{"cell_type":"code","execution_count":null,"id":"be39879d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"be39879d","executionInfo":{"status":"ok","timestamp":1684842439821,"user_tz":-180,"elapsed":20,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"c74310e6-2e84-4b68-b128-25b12e4870d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["First network:  0.8067238139969796\n","Second network:  (0.8800925786929503, 0.8800925786929503)\n"]}],"source":["import numpy as np\n","\n","def sigmoid(x):\n","    return 1 / (1+np.exp(-x))\n","\n","class Neuron:\n","    def __init__(self, weights, bias):\n","        self.weights = weights\n","        self.bias = bias\n","    def feedforward(self, inputs):\n","        total = np.dot(self.weights, inputs) + self.bias\n","        return sigmoid(total)\n","\n","class OurNeuralNetwork1:\n","    def __init__(self):\n","        weights = np.array([0.5, 0.5, 0.5])\n","        bias = 0\n","        self.h1 = Neuron(weights, bias)\n","        self.h2 = Neuron(weights, bias)\n","        self.h3 = Neuron(weights, bias)\n","        self.o1 = Neuron(weights, bias)\n","    def feedforward(self, x):\n","        out_h1 = self.h1.feedforward(x)\n","        out_h2 = self.h2.feedforward(x)\n","        out_h3 = self.h3.feedforward(x)\n","        out_o1 = self.o1.feedforward(np.array([out_h1, out_h2, out_h3]))\n","        return out_o1\n","\n","class OurNeuralNetwork2:\n","    def __init__(self):\n","        weights = np.array([1.0, 0.0])\n","        bias = 1\n","        self.h1 = Neuron(weights, bias)\n","        self.h2 = Neuron(weights, bias)\n","        self.o1 = Neuron(weights, bias)\n","        self.o2 = Neuron(weights, bias)\n","    def feedforward(self, x):\n","        out_h1 = self.h1.feedforward(x)\n","        out_h2 = self.h2.feedforward(x)\n","        out_o1 = self.o1.feedforward(np.array([out_h1, out_h2]))\n","        out_o2 = self.o2.feedforward(np.array([out_h1, out_h2]))\n","        return out_o1, out_o2\n","\n","network1 = OurNeuralNetwork1()\n","x1=np.array([1,2,3])\n","print(\"First network: \", network1.feedforward(x1))\n","\n","network2 = OurNeuralNetwork2()\n","x2=np.array([4,5])\n","print(\"Second network: \", network2.feedforward(x2))"]},{"cell_type":"markdown","id":"36cd1233","metadata":{"id":"36cd1233"},"source":["## **Задание**\n","#### Реализуйте классы нейронных сетей с использованием других функций\n","#### активации"]},{"cell_type":"code","execution_count":null,"id":"cd3b70a3","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cd3b70a3","executionInfo":{"status":"ok","timestamp":1684842439822,"user_tz":-180,"elapsed":17,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"2cce1a39-dfec-4f11-a9bf-81647660e702"},"outputs":[{"output_type":"stream","name":"stdout","text":["First network (sigmoid):  0.8067238139969796\n","Second network (sigmoid):  (0.8800925786929503, 0.8800925786929503)\n","\n","First network (tanh):  0.903798759264991\n","Second network (tanh):  (0.9640211647205602, 0.9640211647205602)\n","\n","First network (ReLU):  4.5\n","Second network (ReLU):  (6.0, 6.0)\n","\n"]}],"source":["import numpy as np\n","\n","def sigmoid(x):\n","    return 1 / (1+np.exp(-x))\n","def tanh(x):\n","    return np.tanh(x)\n","def ReLU(x):\n","    return max(0,x)\n","for i in range(3):\n","    class Neuron:\n","        def __init__(self, weights, bias):\n","            self.weights = weights\n","            self.bias = bias\n","        def feedforward(self, inputs):\n","            total = np.dot(self.weights, inputs) + self.bias\n","            if (i==0): return sigmoid(total)\n","            if (i==1): return tanh(total)\n","            if (i==2): return ReLU(total)\n","\n","    class OurNeuralNetwork1:\n","        def __init__(self):\n","            weights = np.array([0.5, 0.5, 0.5])\n","            bias = 0\n","            self.h1 = Neuron(weights, bias)\n","            self.h2 = Neuron(weights, bias)\n","            self.h3 = Neuron(weights, bias)\n","            self.o1 = Neuron(weights, bias)\n","        def feedforward(self, x):\n","            out_h1 = self.h1.feedforward(x)\n","            out_h2 = self.h2.feedforward(x)\n","            out_h3 = self.h3.feedforward(x)\n","            out_o1 = self.o1.feedforward(np.array([out_h1, out_h2, out_h3]))\n","            return out_o1\n","\n","    class OurNeuralNetwork2:\n","        def __init__(self):\n","            weights = np.array([1.0, 0.0])\n","            bias = 1\n","            self.h1 = Neuron(weights, bias)\n","            self.h2 = Neuron(weights, bias)\n","            self.o1 = Neuron(weights, bias)\n","            self.o2 = Neuron(weights, bias)\n","        def feedforward(self, x):\n","            out_h1 = self.h1.feedforward(x)\n","            out_h2 = self.h2.feedforward(x)\n","            out_o1 = self.o1.feedforward(np.array([out_h1, out_h2]))\n","            out_o2 = self.o2.feedforward(np.array([out_h1, out_h2]))\n","            return out_o1, out_o2\n","\n","    network1 = OurNeuralNetwork1()\n","    x1=np.array([1,2,3])\n","    if(i==0): print(\"First network (sigmoid): \", network1.feedforward(x1))\n","    if(i==1): print(\"First network (tanh): \", network1.feedforward(x1))\n","    if(i==2): print(\"First network (ReLU): \", network1.feedforward(x1))\n","\n","    network2 = OurNeuralNetwork2()\n","    x2=np.array([4,5])\n","    if (i==0): print(\"Second network (sigmoid): \", network2.feedforward(x2))\n","    if (i==1): print(\"Second network (tanh): \", network2.feedforward(x2))\n","    if (i==2): print(\"Second network (ReLU): \", network2.feedforward(x2))\n","    \n","    print()"]},{"cell_type":"code","execution_count":null,"id":"427aa930","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"427aa930","executionInfo":{"status":"ok","timestamp":1684842439822,"user_tz":-180,"elapsed":13,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"b26c33d3-f91f-410a-9ed4-9f9abd407ec3"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.9613959740515259\n"]}],"source":["def max(x):\n","    return np.maximum(0,x)\n","\n","class Neuron:\n","    def __init__(self, weights, bias):\n","        self.weights = weights\n","        self.bias = bias\n","    \n","    def feedforward(self, inputs):\n","        total = np.dot(self.weights, inputs) + self.bias\n","        return tanh(total)\n","    \n","class NeuralNetwork:\n","    def __init__(self):\n","        weights = np.array([1, 0])\n","        bias = 1\n","        self.h1 = Neuron(weights, bias)\n","        self.h2 = Neuron(weights, bias)\n","        self.o1 = Neuron(weights, bias)\n","        \n","    def feedforward(self, x):\n","        out_h1 = self.h1.feedforward(x)\n","        out_h2 = self.h2.feedforward(x)\n","        out_o1 = self.o1.feedforward(np.array([out_h1, out_h2]))\n","        return out_o1\n","        \n","network = NeuralNetwork()\n","x = np.array([1, 2])\n","print(network.feedforward(x))"]},{"cell_type":"markdown","id":"262145ca","metadata":{"id":"262145ca"},"source":["## Задание\n","#### Используйте классы MLPClassified и MLPRegressor для классификации и\n","#### регрессии произвольных данных из интернета. Проведите анализ\n","#### атрибуты, полученных моделей.\n","#### Для классификации можете взять набор данных Ирисов:\n","#### https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f\n","#### 7d537619d0e07d5ae3/iris.csv\n","#### а для регрессии датасет зависимости заработной платы от опыта работы:\n","#### https://raw.githubusercontent.com/AnnaShestova/salary-years-simple-linearregression/master/Salary_Data.csv"]},{"cell_type":"code","execution_count":null,"id":"fe232169","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fe232169","executionInfo":{"status":"ok","timestamp":1684842442771,"user_tz":-180,"elapsed":2959,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"d5a3cd04-fc61-490f-ee07-adda9db97c11"},"outputs":[{"output_type":"stream","name":"stdout","text":["(120, 4) (30, 4) (120,) (30,)\n","['Versicolor' 'Virginica' 'Setosa' 'Virginica' 'Versicolor' 'Versicolor'\n"," 'Setosa' 'Versicolor' 'Setosa' 'Setosa' 'Versicolor' 'Setosa'\n"," 'Versicolor' 'Virginica' 'Virginica']\n","50     Versicolor\n","114     Virginica\n","45         Setosa\n","134     Virginica\n","68     Versicolor\n","53     Versicolor\n","27         Setosa\n","78     Versicolor\n","18         Setosa\n","29         Setosa\n","64     Versicolor\n","34         Setosa\n","98     Versicolor\n","144     Virginica\n","138     Virginica\n","Name: variety, dtype: object\n","Test Accurancy: 1.000\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import sklearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.neural_network import MLPRegressor, MLPClassifier\n","\n","url = r'https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f7d537619d0e07d5ae3/iris.csv'\n","\n","data = pd.read_csv(url)\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    data.iloc[:,:-1],    # все колонки кроме последней - в признаки\n","    data.iloc[:,-1], # последнюю в целевую переменную (класс)\n","    test_size = 0.20 # размер тестовой выборки 20%\n",")\n","print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)\n","\n","mlp_classifier = MLPClassifier(random_state=123, max_iter=1000)\n","mlp_classifier.fit(X_train, y_train)\n","Y_preds = mlp_classifier.predict(X_test)\n","\n","print(Y_preds[:15])\n","print(y_test[:15])\n","\n","## Score - оценка точности моделей классификации\n","print('Test Accurancy: %.3f'%mlp_classifier.score(X_test, y_test))"]},{"cell_type":"code","execution_count":null,"id":"091ccc2a","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":516},"id":"091ccc2a","executionInfo":{"status":"ok","timestamp":1684842443839,"user_tz":-180,"elapsed":1075,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"4879f84f-8ee2-4525-b7fa-40c2b92e886a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["from sklearn.metrics import confusion_matrix\n","\n","def plot_confusion_matrix(y_test, Y_preds):\n","    conf_mat = confusion_matrix(y_test, Y_preds)\n","    fig = plt.figure(figsize=(6, 6))\n","    plt.matshow(conf_mat, cmap=plt.cm.Blues, fignum=1)\n","    plt.yticks(range(3), data.iloc[:,-1].unique())\n","    plt.xticks(range(3), data.iloc[:,-1].unique())\n","    plt.colorbar();\n","    for i in range(3):\n","        for j in range(3):\n","            plt.text(i-0.2, j+0.1, str(conf_mat[j, i]), color ='tab:red')\n","plot_confusion_matrix(y_test, Y_preds)"]},{"cell_type":"code","execution_count":null,"id":"639666c1","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"639666c1","executionInfo":{"status":"ok","timestamp":1684842443840,"user_tz":-180,"elapsed":19,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"9236c074-756b-4e8b-d339-704ed3748fd6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Loss:  0.083\n","Number of coefs:  2\n","Number of intercepts:  2\n","Number of iterations for which estimator ran:  658\n","Name of output layer activation function:  softmax\n"]}],"source":["print(\"Loss: \", round(mlp_classifier.loss_,3))\n","print(\"Number of coefs: \", len(mlp_classifier.coefs_))\n","print(\"Number of intercepts: \", len(mlp_classifier.intercepts_))\n","print(\"Number of iterations for which estimator ran: \", mlp_classifier.n_iter_)\n","print(\"Name of output layer activation function: \", mlp_classifier.out_activation_)"]},{"cell_type":"code","execution_count":null,"id":"5a83d7aa","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5a83d7aa","executionInfo":{"status":"ok","timestamp":1684842443841,"user_tz":-180,"elapsed":15,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"de3bb27f-4ded-447a-8722-c28df81586d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["(24, 1) (6, 1) (24,) (6,)\n"]}],"source":["url = r'https://raw.githubusercontent.com/AnnaShestova/salary-years-simple-linear-regression/master/Salary_Data.csv'\n","\n","data = pd.read_csv(url)\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    data.iloc[:,:-1].values,    # все колонки кроме последней - в признаки\n","    data.iloc[:,-1].values, # последнюю в целевую переменную (класс)\n","    train_size=0.80,\n","    test_size = 0.20, # размер тестовой выборки 20%\n","    random_state=123\n",")\n","print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"]},{"cell_type":"code","execution_count":null,"id":"29397217","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"29397217","executionInfo":{"status":"ok","timestamp":1684842475026,"user_tz":-180,"elapsed":31197,"user":{"displayName":"Георгий Р.","userId":"03469142339580388853"}},"outputId":"54d297a0-5ea7-4752-f13f-6401c8533e92"},"outputs":[{"output_type":"stream","name":"stdout","text":["[ 55265.2045971  126554.5591937   52335.80522199 116782.59147446\n","  55265.2045971  117759.05793283]\n","[ 54445. 121872.  56642. 116969.  64445. 112635.]\n","Test R^2: 0.971\n","Training R^2: 0.948\n","Loss:  16873681.689960103\n","Number of coefs:  2\n","Number of intercepts:  2\n","Number of iterations for which estimator ran:  30344\n","Name of output layer activation function:  identity\n"]}],"source":["mlp_regressor = MLPRegressor(random_state=123, max_iter = 32000)\n","mlp_regressor.fit(X_train, y_train)\n","\n","Y_preds = mlp_regressor.predict(X_test)\n","\n","print(Y_preds[:10])\n","print(y_test[:10])\n","## метод Score для оценки точности моделей классификации\n","print('Test R^2: %.3f'%mlp_regressor.score(X_test, y_test))\n","print('Training R^2: %.3f'%mlp_regressor.score(X_train, y_train))\n","print(\"Loss: \", mlp_regressor.loss_)\n","print(\"Number of coefs: \", len(mlp_regressor.coefs_))\n","[weights.shape for weights in mlp_regressor.coefs_]\n","print(\"Number of intercepts: \", len(mlp_regressor.intercepts_))\n","print(\"Number of iterations for which estimator ran: \", mlp_regressor.n_iter_)\n","print(\"Name of output layer activation function: \", mlp_regressor.out_activation_)"]},{"cell_type":"code","execution_count":null,"id":"385b0a4f","metadata":{"id":"385b0a4f"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"colab":{"provenance":[{"file_id":"1hgKjD38tt6A5_9jSDhSSgC3DOroLuFQt","timestamp":1684842909600}]}},"nbformat":4,"nbformat_minor":5}